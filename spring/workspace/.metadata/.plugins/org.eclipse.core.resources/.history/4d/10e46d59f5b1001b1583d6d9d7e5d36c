package com.servlet.service;

import java.sql.SQLException;
import java.util.List;

import com.servlet.dto.MemberVO;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.servlet.dao.MemDAO;
import com.servlet.exception.FailedDeleteException;
import com.servlet.exception.FailedInsertException;
import com.servlet.exception.FailedUpdateException;
import com.servlet.exception.SelecteNullpointerException;

public class MemberServiceImpl implements MemberService {

	private MemDAO memberDAO; // - MemberDAOImpl.getInstance();
	private SqlMapClient smc;
//	@Override
//	public MemberVO login(String id, String pwd) throws NotFoundIDException, InvalidPasswordException, SQLException {
//		MemberVO member = null;
//		
//		try {
//			member = memberDAO.selectMemberByID(smc,id);
//		} catch (SQLException e) {
//			// Exception에 대한 처리 구문 필요
//			e.printStackTrace();
//			throw e;
//		}
//		if(member != null) {
//			if(pwd.equals(member.getPw())) {//로그인 성공
//				return member;
//			} else { //패스워드 불일치
//				throw new InvalidPasswordException();
//			}
//		} else {
//			throw new NotFoundIDException();
//		}
//	}
	@Override
	public List<MemberVO> selectMember() throws SQLException, SelecteNullpointerException{
		List<MemberVO> memList = null;
		try {
			memList = memberDAO.selectMember(smc);
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		}
		if(memList != null) {
			return memList;
		} else {
			throw new SelecteNullpointerException();
		}
	}
	@Override
	public int insertMember(MemberVO mv) throws SQLException, FailedInsertException{
		int insertResult = 0;
		try {
			insertResult = memberDAO.insertMember(smc, mv);
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		}
		if(insertResult == 0) {
			return insertResult;
		} else {
			throw new FailedInsertException();
		}
	}
	@Override
	public int updateMember(MemberVO mv) throws SQLException, FailedUpdateException{
		int updateResult = 0;
		try {
			updateResult = memberDAO.updateMember(smc, mv);
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		}
		if(updateResult == 0) {
			return updateResult;
		} else {
			throw new FailedUpdateException();
		}
	}
	@Override
	public int deleteMember(String memId) throws SQLException, FailedDeleteException{
		int deleteResult = 0;
		try {
			deleteResult = memberDAO.deleteMember(smc, memId);
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		}
		if(deleteResult == 0) {
			return deleteResult;
		} else {
			throw new FailedDeleteException(); 
		}
	}

}
